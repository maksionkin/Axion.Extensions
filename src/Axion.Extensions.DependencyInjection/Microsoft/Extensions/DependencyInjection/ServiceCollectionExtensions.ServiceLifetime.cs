// Copyright (c) Michael Aksionkin. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

#nullable enable

using System;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace Microsoft.Extensions.DependencyInjection;

partial class ServiceCollectionExtensions
{
    /// <summary>
    /// Adds a scoped service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/>.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <returns>A reference to this instance after the operation has completed.</returns>
    /// <seealso cref="ServiceLifetime.Scoped"/>
    public static IServiceCollection AddScoped(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.Add(implementationFactory, ServiceCollectionServiceExtensions.AddScoped, serviceType);

    /// <summary>
    /// Adds a scoped service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/> if te service has not beed added yet.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <seealso cref="ServiceLifetime.Scoped"/>
    public static void TryAddScoped(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.TryAdd(implementationFactory, ServiceCollectionDescriptorExtensions.TryAddScoped, serviceType);
    /// <summary>
    /// Adds a singleton service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/>.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <returns>A reference to this instance after the operation has completed.</returns>
    /// <seealso cref="ServiceLifetime.Singleton"/>
    public static IServiceCollection AddSingleton(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.Add(implementationFactory, ServiceCollectionServiceExtensions.AddSingleton, serviceType);

    /// <summary>
    /// Adds a singleton service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/> if te service has not beed added yet.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <seealso cref="ServiceLifetime.Singleton"/>
    public static void TryAddSingleton(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.TryAdd(implementationFactory, ServiceCollectionDescriptorExtensions.TryAddSingleton, serviceType);
    /// <summary>
    /// Adds a transient service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/>.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <returns>A reference to this instance after the operation has completed.</returns>
    /// <seealso cref="ServiceLifetime.Transient"/>
    public static IServiceCollection AddTransient(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.Add(implementationFactory, ServiceCollectionServiceExtensions.AddTransient, serviceType);

    /// <summary>
    /// Adds a transient service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/> if te service has not beed added yet.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <seealso cref="ServiceLifetime.Transient"/>
    public static void TryAddTransient(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.TryAdd(implementationFactory, ServiceCollectionDescriptorExtensions.TryAddTransient, serviceType);
}