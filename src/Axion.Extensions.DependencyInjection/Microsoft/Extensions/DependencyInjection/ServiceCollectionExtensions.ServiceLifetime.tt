<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) Michael Aksionkin. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

#nullable enable

using System;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace Microsoft.Extensions.DependencyInjection;

partial class ServiceCollectionExtensions
{
<#
    foreach (var lifetime in new[] { "Scoped", "Singleton", "Transient" })
    { #>
    /// <summary>
    /// Adds a <#= lifetime.ToLowerInvariant() #> service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/>.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <returns>A reference to this instance after the operation has completed.</returns>
    /// <seealso cref="ServiceLifetime.<#= lifetime #>"/>
    public static IServiceCollection Add<#= lifetime #>(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.Add(implementationFactory, ServiceCollectionServiceExtensions.Add<#= lifetime #>, serviceType);

    /// <summary>
    /// Adds a <#= lifetime.ToLowerInvariant() #> service of the type specified in <paramref name="serviceType"/> with a factory specified in <paramref name="implementationFactory"/> to the specified <see cref="IServiceCollection"/> if te service has not beed added yet.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/> to add the service to.</param>
    /// <param name="serviceType">The type of the service to register.</param>
    /// <param name="implementationFactory">The factory that creates the service.</param>
    /// <seealso cref="ServiceLifetime.<#= lifetime #>"/>
    public static void TryAdd<#= lifetime #>(this IServiceCollection services, Delegate implementationFactory, Type? serviceType = null) =>
        services.TryAdd(implementationFactory, ServiceCollectionDescriptorExtensions.TryAdd<#= lifetime #>, serviceType);
<#    
    } #>
}