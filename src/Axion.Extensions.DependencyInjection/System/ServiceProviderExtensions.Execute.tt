<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
// Copyright (c) Michael Aksionkin. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

#nullable enable

using System.Threading.Tasks;

namespace System;

partial class ServiceProviderExtensions
{
<#
    var ordinal = new[] { "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };

    void PrintTypenames(int argCount)
    {
        for (var curArg = 1; curArg <= argCount; curArg++)
        {
        #>
    /// <typeparam name="T<#= curArg #>">The type of the <#= ordinal[curArg - 1] #> parameter of the function.</typeparam>
<#
        }
    }

    for (var argCount = 1; argCount <= ordinal.Length; argCount++)
    { 
        var parameters = string.Join(", ", Enumerable.Range(1, argCount).Select(i => $"T{i}")); 
#>
    /// <summary>
    /// Executes a <paramref name="delegate"/> in context of <see cref="IServiceProvider"/>.
    /// </summary>
<#      PrintTypenames(argCount); #>
    /// <typeparam name="TResult">The type of the return value of the method that <paramref name="delegate"/> encapsulates.</typeparam>
    /// <param name="serviceProvider">a <see cref="IServiceProvider"/>.</param>
    /// <param name="delegate">A delegate that is executed in context of <paramref name="serviceProvider"/>.</param>
    /// <returns>A value that returns <paramref name="delegate"/>.</returns>
    public static TResult Execute<<#= parameters #>, TResult>(this IServiceProvider serviceProvider, Func<<#= parameters #>, TResult> @delegate) =>
        serviceProvider.Execute<TResult>((Delegate)@delegate);

    /// <summary>
    /// Executes a <paramref name="delegate"/> in context of <see cref="IServiceProvider"/>.
    /// </summary>
<#      PrintTypenames(argCount); #>
    /// <typeparam name="TResult">The type of the return value of the method that <paramref name="delegate"/> encapsulates.</typeparam>
    /// <param name="serviceProvider">a <see cref="IServiceProvider"/>.</param>
    /// <param name="delegate">A delegate that is executed in context of <paramref name="serviceProvider"/>.</param>
    /// <returns>A value that returns <paramref name="delegate"/>.</returns>
    public static Task<TResult> ExecuteAsync<<#= parameters #>, TResult>(this IServiceProvider serviceProvider, Func<<#= parameters #>, Task<TResult>> @delegate) =>
        serviceProvider.Execute<Task<TResult>>((Delegate)@delegate);

    /// <summary>
    /// Executes a <paramref name="delegate"/> in context of <see cref="IServiceProvider"/>.
    /// </summary>
<#      PrintTypenames(argCount); #>
    /// <param name="serviceProvider">a <see cref="IServiceProvider"/>.</param>
    /// <param name="delegate">A delegate that is executed in context of <paramref name="serviceProvider"/>.</param>
    /// <returns>A value that returns <paramref name="delegate"/>.</returns>
    public static Task ExecuteAsync<<#= parameters #>>(this IServiceProvider serviceProvider, Func<<#= parameters #>, Task> @delegate) =>
        serviceProvider.Execute<Task>((Delegate)@delegate);

    /// <summary>
    /// Executes a <paramref name="delegate"/> in context of <see cref="IServiceProvider"/>.
    /// </summary>
<#      PrintTypenames(argCount); #>
    /// <param name="serviceProvider">a <see cref="IServiceProvider"/>.</param>
    /// <param name="delegate">A delegate that is executed in context of <paramref name="serviceProvider"/>.</param>
    public static void Execute<<#= parameters #>>(this IServiceProvider serviceProvider, Action<<#= parameters #>> @delegate) =>
        serviceProvider.Execute((Delegate)@delegate);

<#
    }#>
}