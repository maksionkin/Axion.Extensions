<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) Michael Aksionkin. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

#nullable enable

using System.Globalization;
using Microsoft.Extensions.DependencyInjection;

using Microsoft.Azure.WebJobs;

namespace Axion.Azure.Functions.Worker.Converters;

static class ConverterRegistartion
{
    public static void RegisterSimpleTypesConverters(this IServiceCollection services)
    {

<#
void WriteToStringConverter(string type)
{
    #>
    
        services.AddConverter((<#= type #> input) => input.ToString(CultureInfo.InvariantCulture));
    <#
}

void WriteFromStringConverter(string type, string styles)
{
    #>
    
        services.AddConverter((string input) => <#= type #>.Parse(input, <#= styles#>, CultureInfo.InvariantCulture));
    <#
}

var signedIntegralTypes = new List<string>
{
    "sbyte",
    "short",
    "int",
    "long",
    "System.Numerics.BigInteger"
};

var unsignedIntegralTypes = new List<string>
{
    "byte",
    "ushort",
    "uint",
    "ulong",
};

var floatingPointTypes = new List<string>
{
    "float",
    "double",
    "decimal",
};

foreach (var type in signedIntegralTypes.Concat(unsignedIntegralTypes).Concat(floatingPointTypes))
{
    WriteToStringConverter(type);
}

foreach (var type in signedIntegralTypes)
{
    WriteFromStringConverter(type, "NumberStyles.AllowLeadingSign");
}

foreach (var type in unsignedIntegralTypes)
{
    WriteFromStringConverter(type, "NumberStyles.None");
}

foreach (var type in floatingPointTypes)
{
    WriteFromStringConverter(type, "NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent");
}
#>
}
}